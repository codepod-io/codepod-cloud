// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator studio-client {
    provider        = "prisma-client-js"
    previewFeatures = ["omitApi"]
    binaryTargets   = ["native"]
}

model User {
    id             String  @id
    email          String  @unique
    // username is an optional value, because it might create barrier when user signup.
    username       String? @unique
    firstname      String
    lastname       String
    // A user might not have a password, if they login via OAuth.
    hashedPassword String?

    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @default(now()) @updatedAt
    repo         Repo[]         @relation("OWNER")
    sharedRepos  Repo[]         @relation("COLLABORATOR")
    stars        Repo[]         @relation("STAR")
    UserRepoData UserRepoData[]
    setting      Setting?
}

model Setting {
    // id        Int      @id @default(autoincrement())
    id        String   @id @default(uuid())
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    debugMode       Boolean @default(false)
    showLineNumbers Boolean @default(false)
}

model UserRepoData {
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    repo       Repo     @relation(fields: [repoId], references: [id], onDelete: Cascade)
    repoId     String
    accessedAt DateTime @default(now()) @updatedAt
    dummyCount Int      @default(0)

    // Canvas view port information
    zoom Float?
    x    Float?
    y    Float?

    // use computed ID
    @@id([userId, repoId])
}

model Repo {
    id            String              @id
    name          String?
    // fullname String  @unique
    owner         User                @relation("OWNER", fields: [userId], references: [id])
    userId        String
    public        Boolean             @default(false)
    collaborators User[]              @relation("COLLABORATOR")
    createdAt     DateTime            @default(now())
    // Edit pod content likely won't update this updatedAt field.
    updatedAt     DateTime            @default(now()) @updatedAt
    UserRepoData  UserRepoData[]
    stargazers    User[]              @relation("STAR")
    numLikes      Int                 @default(0)
    yDocBlob      YDocBlob?
    versions      VersionedYDocBlob[]
    kernel        Kernel[]
}

model VersionedYDocBlob {
    id      String   @id
    // data
    time    DateTime
    message String
    blob    Bytes
    size    Int
    // relation
    repo    Repo     @relation(fields: [repoId], references: [id], onDelete: Cascade)
    repoId  String
}

model YDocBlob {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // data
    blob      Bytes
    size      Int
    // relation
    repo      Repo     @relation(fields: [repoId], references: [id], onDelete: Cascade)
    repoId    String   @unique
}

enum KernelLanguage {
    python
    julia
    javascript
    racket
}

model Kernel {
    id         Int            @id @default(autoincrement())
    name       KernelLanguage
    dummyCount Int            @default(0)
    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt
    repo       Repo           @relation(fields: [repoId], references: [id])
    repoId     String
}
