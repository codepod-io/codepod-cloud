apiVersion: v1
stringData:
  # this user account is not used
  username: user
  password: "{{ .Values.dbPassword }}"
kind: Secret
metadata:
  name: db-secret
type: kubernetes.io/basic-auth

---
apiVersion: v1
stringData:
  # the superuser username has to be "postgres"
  username: postgres
  password: "{{ .Values.dbPassword }}"
kind: Secret
metadata:
  name: db-superuser
type: kubernetes.io/basic-auth

---
apiVersion: v1
kind: Secret
metadata:
  name: aws-creds
stringData:
  ACCESS_KEY_ID: "{{ .Values.awsAccessKeyId }}"
  ACCESS_SECRET_KEY: "{{ .Values.awsSecretAccessKey }}"

---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: database
spec:
  instances: 1

  enableSuperuserAccess: true

  superuserSecret:
    name: db-superuser

  storage:
    size: 1Gi

  resources:
    requests:
      memory: "512Mi"
      cpu: "1"
    limits:
      memory: "1Gi"
      cpu: "2"

  # -------------------------
  # Option 1: Init an empty DB
  bootstrap:
    initdb:
      database: "app"
      owner: "user"
      secret:
        name: db-secret

  backup:
    barmanObjectStore:
      destinationPath: s3://codepod-dev/db-backup/
      s3Credentials:
        accessKeyId:
          name: aws-creds
          key: ACCESS_KEY_ID
        secretAccessKey:
          name: aws-creds
          key: ACCESS_SECRET_KEY
      wal:
        compression: gzip
    # retentionPolicy: "30d"
    retentionPolicy: "1d"

  # -------------------------
  # Option 2: Recover from a backup
  # bootstrap:
  #   recovery:
  #     source: backup-cluster
  # externalClusters:
  # - name: backup-cluster
  #   barmanObjectStore:
  #     destinationPath: s3://codepod-dev/db-backup/
  #     s3Credentials:
  #       accessKeyId:
  #         name: aws-creds
  #         key: ACCESS_KEY_ID
  #       secretAccessKey:
  #         name: aws-creds
  #         key: ACCESS_SECRET_KEY
  # backup:
  #   barmanObjectStore:
  #     destinationPath: s3://codepod-dev/db-backup/
  #     # a different backup folder
  #     serverName: "recoveredCluster"
  #     s3Credentials:
  #       accessKeyId:
  #         name: aws-creds
  #         key: ACCESS_KEY_ID
  #       secretAccessKey:
  #         name: aws-creds
  #         key: ACCESS_SECRET_KEY
  #     wal:
  #       compression: gzip
  #   # retentionPolicy: "30d"
  #   retentionPolicy: "1d"


# On-demand backup
# ---
# apiVersion: postgresql.cnpg.io/v1
# kind: Backup
# metadata:
#   name: pg-backup-example
# spec:
#   cluster:
#     name: database


# ---
# apiVersion: postgresql.cnpg.io/v1
# kind: ScheduledBackup
# metadata:
#   name: scheduled-backup-example
# spec:
#   # every day at midnight
#   schedule: "0 0 0 * * *"
#   backupOwnerReference: self
#   cluster:
#     name: database
#   # immediate: true